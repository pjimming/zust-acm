// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAuthFieldNames          = builder.RawFieldNames(&UserAuth{})
	userAuthRows                = strings.Join(userAuthFieldNames, ",")
	userAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userAuthModel interface {
		Insert(ctx context.Context, data *UserAuth) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserAuth, error)
		FindOneByUsername(ctx context.Context, username string) (*UserAuth, error)
		Update(ctx context.Context, data *UserAuth) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserAuthModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserAuth struct {
		Id         uint64    `db:"id"`          // 序号
		GmtCreated time.Time `db:"gmt_created"` // 创建时间
		GmtUpdated time.Time `db:"gmt_updated"` // 更新时间
		IsDelete   uint64    `db:"is_delete"`   // 是否删除，0-未删除，1-删除，默认为0
		Username   string    `db:"username"`    // 账号
		Password   string    `db:"password"`    // 密码，加密后
	}
)

func newUserAuthModel(conn sqlx.SqlConn) *defaultUserAuthModel {
	return &defaultUserAuthModel{
		conn:  conn,
		table: "`user_auth`",
	}
}

func (m *defaultUserAuthModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserAuthModel) FindOne(ctx context.Context, id uint64) (*UserAuth, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAuthRows, m.table)
	var resp UserAuth
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) FindOneByUsername(ctx context.Context, username string) (*UserAuth, error) {
	var resp UserAuth
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userAuthRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) Insert(ctx context.Context, data *UserAuth) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, userAuthRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GmtCreated, data.GmtUpdated, data.IsDelete, data.Username, data.Password)
	return ret, err
}

func (m *defaultUserAuthModel) Update(ctx context.Context, newData *UserAuth) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAuthRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.GmtCreated, newData.GmtUpdated, newData.IsDelete, newData.Username, newData.Password, newData.Id)
	return err
}

func (m *defaultUserAuthModel) tableName() string {
	return m.table
}
